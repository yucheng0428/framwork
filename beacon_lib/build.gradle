apply plugin: 'com.jakewharton.butterknife'
if (isModuleBeacon.toBoolean()) {
    apply plugin: 'com.android.application'
}else {
    apply plugin: "com.android.library"
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        if (isModuleBeacon.toBoolean()) {
            // 独立调试时添加 applicationId ，集成调试时移除
            applicationId "com.qyai.beaconlib"
        }
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        //阿里路由配置
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [moduleName: project.getName()]
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    sourceSets {
        main {
            // 独立调试与集成调试时使用不同的 AndroidManifest.xml 文件
            if (isModuleBeacon.toBoolean()) {
                manifest.srcFile 'src/main/moduleManifest/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    exclude 'debug/**'
                }
            }
        }
    }
    compileOptions {
        sourceCompatibility rootProject.ext.javaVersion
        targetCompatibility rootProject.ext.javaVersion
    }

}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.3'
    implementation 'androidx.navigation:navigation-fragment:2.3.1'
    implementation 'androidx.navigation:navigation-ui:2.3.1'
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'
    implementation project(path: ':lib_common')
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    implementation 'org.altbeacon:android-beacon-library:2.16.3'
    annotationProcessor "com.jakewharton:butterknife-compiler:$rootProject.butterknifeVersion"

    implementation "com.alibaba:arouter-api:$rootProject.arouterVersion"
    annotationProcessor "com.alibaba:arouter-compiler:$rootProject.acompilerVersion"//ARouter

}
task makeJar(type:Copy) {
//删除存在的jar
    delete "build/lib/test.jar"
//设置拷贝文件
    from("build/intermediates/bundles/release")
//打进jar后文件目录
    into("build/libs/")
//将classes.jar放入build/libs目录下
//include,exclude参数来设置过滤
    include("classes.jar")
//重命名为test.jar
    rename("classes.jar","test.jar")
}
makeJar.dependsOn(build)